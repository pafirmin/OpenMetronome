!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
App	src/App.js	/^const App = () => {$/;"	F
Controls	src/components/Controls.js	/^const Controls = () => {$/;"	F
Metronome	src/components/Metronome.js	/^const Metronome = () => {$/;"	F
Pendulum	src/components/Metronome.js	/^const Pendulum = styled.div`$/;"	S
SET_METRE	src/actions/types.js	/^export const SET_METRE = "SET_METRE";$/;"	E
SET_TEMPO	src/actions/types.js	/^export const SET_TEMPO = "SET_TEMPO";$/;"	E
TOGGLE_IS_PLAYING	src/actions/types.js	/^export const TOGGLE_IS_PLAYING = "TOGGLE_IS_PLAYING";$/;"	E
Wrapper	src/components/Controls.js	/^const Wrapper = styled.div`$/;"	S
Wrapper	src/components/Metronome.js	/^const Wrapper = styled.div`$/;"	S
action	src/reducers/metronomeReducer.test.js	/^    const action = {$/;"	O
actions	src/actions/metronomeActions.test.js	/^import * as actions from ".\/metronomeActions";$/;"	I
beatCount	src/components/Metronome.js	/^  const [beatCount, setBeatCount] = useState(1);$/;"	V
current	src/components/Metronome.js	/^    stopAudio.current = () => clearInterval(pulse);$/;"	M
expectedAction	src/actions/metronomeActions.test.js	/^    const expectedAction = { type: SET_METRE, payload: 7 };$/;"	O
expectedAction	src/actions/metronomeActions.test.js	/^    const expectedAction = { type: SET_TEMPO, payload: 80 };$/;"	O
expectedAction	src/actions/metronomeActions.test.js	/^    const expectedAction = { type: TOGGLE_IS_PLAYING };$/;"	O
handleTempo	src/components/Controls.js	/^  const handleTempo = () => {$/;"	F
initialState	src/reducers/metronomeReducer.js	/^const initialState = {$/;"	O
isPlaying	src/components/Controls.js	/^  const { tempo, isPlaying } = useSelector((state) => state);$/;"	V
isPlaying	src/components/Metronome.js	/^  const { tempo, metre, isPlaying } = useSelector((state) => state);$/;"	V
isPlaying	src/reducers/metronomeReducer.js	/^  isPlaying: false,$/;"	P
metre	src/components/Metronome.js	/^  const { tempo, metre, isPlaying } = useSelector((state) => state);$/;"	V
metre	src/reducers/metronomeReducer.js	/^  metre: 4,$/;"	P
metronomeReducer	src/reducers/metronomeReducer.js	/^const metronomeReducer = (state = initialState, action) => {$/;"	F
payload	src/actions/metronomeActions.js	/^    payload: meter,$/;"	P
payload	src/actions/metronomeActions.js	/^    payload: tempo,$/;"	P
payload	src/reducers/metronomeReducer.js	/^  const { type, payload } = action;$/;"	V
payload	src/reducers/metronomeReducer.test.js	/^      payload: 7,$/;"	P
payload	src/reducers/metronomeReducer.test.js	/^      payload: 80,$/;"	P
pulse	src/components/Metronome.js	/^    const pulse = setInterval(() => setBeatCount((prev) => prev + 1), interval);$/;"	F
setBeatCount	src/components/Metronome.js	/^  const [beatCount, setBeatCount] = useState(1);$/;"	V
setMetre	src/actions/metronomeActions.js	/^export const setMetre = (meter) => {$/;"	E
setSliderVal	src/components/Controls.js	/^  const [sliderVal, setSliderVal] = useState(tempo);$/;"	V
setTempo	src/actions/metronomeActions.js	/^export const setTempo = (tempo) => {$/;"	E
sliderVal	src/components/Controls.js	/^  const [sliderVal, setSliderVal] = useState(tempo);$/;"	V
startPulse	src/components/Metronome.js	/^  const startPulse = useCallback(() => {$/;"	F
state	src/reducers/metronomeReducer.test.js	/^    const state = {isPlaying: false}$/;"	O
stopAudio	src/components/Metronome.js	/^  const stopAudio = useRef(() => {});$/;"	F
tempo	src/components/Controls.js	/^  const { tempo, isPlaying } = useSelector((state) => state);$/;"	V
tempo	src/components/Metronome.js	/^  const { tempo, metre, isPlaying } = useSelector((state) => state);$/;"	V
tempo	src/reducers/metronomeReducer.js	/^  tempo: 120,$/;"	P
togglePlay	src/actions/metronomeActions.js	/^export const togglePlay = () => {$/;"	E
type	src/actions/metronomeActions.js	/^    type: SET_METRE,$/;"	P
type	src/actions/metronomeActions.js	/^    type: SET_TEMPO,$/;"	P
type	src/reducers/metronomeReducer.js	/^  const { type, payload } = action;$/;"	V
type	src/reducers/metronomeReducer.test.js	/^      type: SET_METRE,$/;"	P
type	src/reducers/metronomeReducer.test.js	/^      type: SET_TEMPO,$/;"	P
type	src/reducers/metronomeReducer.test.js	/^      type: TOGGLE_IS_PLAYING,$/;"	P
